const words = require("../datas/words.js");

let currentWord = "";
let currentPlayerId = null;
let currentPlayerName = "";
let gameActive = false;
let isCanceled = false;
let gameTimeout = null;
let timer = null;
let selected = false;


checkGameStatus = () => {
  if (selected) {
    return true;
  }
  resetGuessGame();
  return false;
};

const startGuessWork = async (bot, chatId, userId, userName) => {
  isCanceled = false;
  selected = true;

  if (gameActive) {
    return bot.sendMessage(chatId, "üü° –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç!");
  }

  if (gameTimeout) {
    clearTimeout(gameTimeout);
  }

  currentPlayerId = userId;
  currentPlayerName = userName;
  currentWord = words[Math.floor(Math.random() * words.length)];
  gameActive = true;

  timer = setTimeout(() => {
    bot.sendMessage(chatId, "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ò–≥—Ä–∞ –æ–±–Ω—É–ª—è–µ—Ç—Å—è.");
    resetGuessGame(chatId);
  }, 300 * 1000);

  bot.sendMessage(
    chatId,
    `üé≤ *–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!*\nüë§ *–û–±—ä—è—Å–Ω—è–µ—Ç:* ${currentPlayerName}`,
    {
      parse_mode: "Markdown",
    }
  );

  bot.sendMessage(chatId, "üîí –ù–∞–∂–º–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ª–æ–≤–æ!", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üëÄ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–æ", callback_data: "show_word" }],
        [{ text: "üîÑ –°–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–æ", callback_data: "change_word" }],
      ],
    },
  });

  bot.on("callback_query", (query) => {
    if (isCanceled || !gameActive) return;

    const chatId = query.message.chat.id;
    const userId = query.from.id;

    if (userId !== currentPlayerId) {
      return bot.answerCallbackQuery(query.id, {
        text: "‚ùå –¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Å–ª–æ–≤–æ!",
        show_alert: true,
      });
    }

    if (query.data === "show_word") {
      bot.answerCallbackQuery(query.id, {
        text: `ü§´ –¢–≤–æ—ë —Å–ª–æ–≤–æ: ${currentWord}\n–û–±—ä—è—Å–Ω–∏ –µ–≥–æ, –Ω–æ –Ω–µ –Ω–∞–∑—ã–≤–∞–π –Ω–∞–ø—Ä—è–º—É—é!`,
        show_alert: true,
      });
    } else if (query.data === "change_word") {
      currentWord = words[Math.floor(Math.random() * words.length)];
      bot.answerCallbackQuery(query.id, {
        text: "‚úÖ –°–ª–æ–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ! –¢–≤–æ—ë –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ: " + currentWord,
        show_alert: true,
      });
    }
  });

  bot.on("message", async (msg) => {
    if (!gameActive || !currentWord || isCanceled) return;

    const chatId = msg.chat.id;
    const text = msg.text?.toLowerCase();
    const userId = msg.from.id;
    const userName = msg.from.first_name;

    const replyText = msg.reply_to_message?.text?.toLowerCase();

    if (
      (text === currentWord.toLowerCase() ||
        replyText === currentWord.toLowerCase()) &&
      userId === currentPlayerId
    ) {
      resetGuessGame(chatId);
      return bot.sendMessage(
        chatId,
        "üî¥ –í —Å–≤—è–∑–∏ —Å —Ç–µ–º, —á—Ç–æ –≤–µ–¥—É—â–∏–π –æ–∑–≤—É—á–∏–ª –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è!"
      );
    }

    if (
      text === currentWord.toLowerCase() ||
      replyText === currentWord.toLowerCase()
    ) {
      bot.sendMessage(
        chatId,
        `üéâ *${userName} —É–≥–∞–¥–∞–ª(–∞) —Å–ª–æ–≤–æ!* –≠—Ç–æ –±—ã–ª–æ: *${currentWord}*`,
        {
          parse_mode: "Markdown",
        }
      );
      currentPlayerId = userId;
      currentPlayerName = userName;
      currentWord = words[Math.floor(Math.random() * words.length)];

      bot.sendMessage(chatId, `üîÑ –ù–æ–≤—ã–π –≤–µ–¥—É—â–∏–π: *${currentPlayerName}*`, {
        parse_mode: "Markdown",
      });

      bot.sendMessage(chatId, "üîí –ù–∞–∂–º–∏, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ª–æ–≤–æ!", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üëÄ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–æ", callback_data: "show_word" }],
            [{ text: "üîÑ –°–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–æ", callback_data: "change_word" }],
          ],
        },
      });

      clearTimeout(timer);
      timer = setTimeout(() => {
        bot.sendMessage(chatId, "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ò–≥—Ä–∞ –æ–±–Ω—É–ª—è–µ—Ç—Å—è.");
        resetGuessGame(chatId);
      }, 300 * 1000);
    }
  });

 
};

function resetGuessGame(chatId) {
  currentWord = "";
  currentPlayerId = null;
  currentPlayerName = "";
  gameActive = false;
  isCanceled = true;
  callbackQueryHandled = false;
  clearTimeout(timer);
  selected = false;
}

module.exports = { startGuessWork, checkGameStatus, resetGuessGame };
