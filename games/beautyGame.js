const TelegramBot = require("node-telegram-bot-api");
const {
  newBeautyGameUser,
  getRandomEliminationMessage,
  getRandomVictoryMessage,
  generateBeautyRuleText,
} = require("../utils/utils");
const { text } = require("body-parser");

const bot = new TelegramBot();

let players = [];
let isGameRunning = false;
let mainText = null;
let listenersAdded = false;
isCanceled = false;
let isFinal = { status: false, isSent: false };
let newRuleAdded = {
  status: false,
  isSent: false,
};
let selected = false;
let interval;
checkBeautyGameStatus = () => {
  if (selected) {
    return true;
  }
  resetBeautyGame();
  return false;
};

function getUsersName() {
  return players
    .map((p) => `- ü§ñ [${p.username}](tg://user?id=${p.userId})`)
    .join("\n");
}

function generateGameText() {
  return (
    `üéâ **–°—Ç–∞—Ä—Ç –æ—Ç–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!**\n\n` +
    `–ò–≥—Ä–∞ "–ö–æ–Ω–∫—É—Ä—Å –ö—Ä–∞—Å–æ—Ç—ã" —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è! üåπ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∏ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –±–æ—Ç–∞!\n\n` +
    `üî• –ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å:\n1. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏\n2. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –±–æ—Ç–∞\n\n` +
    `**–£—á–∞—Å—Ç–Ω–∏–∫–∏**\n\n${getUsersName()}`
  );
}

const beautyGame = (bot, chatId, userId, userName) => {
  selected = true;
  isCanceled = false;
  players = [];
  if (isGameRunning) return;

  players.push(newBeautyGameUser(userId, userName));

  bot
    .sendMessage(chatId, generateGameText(), {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üëÄ –£—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data: "start_beauty" }],
          [{ text: "‚ö† –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", callback_data: "rule_beauty" }],
        ],
      },
      parse_mode: "Markdown",
    })
    .then((msg) => (mainText = msg));

  let timer = 15;
  interval = setInterval(() => {
    timer--;
    if (timer === 10 || timer === 5) {
      bot.sendMessage(chatId, `‚è∞ –û—Å—Ç–∞–ª–æ—Å—å ${timer} —Å–µ–∫—É–Ω–¥`);
    } else if (timer === 0) {
      clearInterval(interval);
      if (players.length < 2) {
        return bot.sendMessage(
          chatId,
          "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã. –ú–∏–Ω–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞."
        );
      }
      isGameRunning = true;
      bot.sendMessage(chatId, "üöÄ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!");
      startGame(bot, chatId);
    }
  }, 1000);

  if (!listenersAdded) {
    listenersAdded = true;

    bot.on("callback_query", (query) => {
      if (query.data === "start_beauty") {
        const chatId = query.message.chat.id;
        const currentUser = query.from;

        if (players.some((p) => p.userId === currentUser.id)) {
          return bot.answerCallbackQuery(query.id, {
            text: "‚ö† –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ",
            show_alert: true,
          });
        }
      }
      if (query.data === "rule_beauty") {
        const userId = query.from.id;
        try {
          bot.sendMessage(
            userId,
            generateBeautyRuleText()
          );
        } catch (error) {
          bot.answerCallbackQuery(query.id, {
            text: "–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞.",
            show_alert: true,
          });
        }
      }

      players.push(newBeautyGameUser(currentUser.id, currentUser.first_name));
      bot.editMessageText(generateGameText(), {
        chat_id: chatId,
        message_id: mainText.message_id,
        reply_markup: {
          inline_keyboard: [
            [{ text: "üëÄ –£—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data: "start_beauty" }],
            [{ text: "‚ö† –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã", callback_data: "rule_beauty" }],
          ],
        },
        parse_mode: "Markdown",
      });
    });
  }
};

async function startGame(bot, groupId) {
  await bot.sendPhoto(groupId, "./assets/beauty-game-logo.png", {
    caption:
      "üß†üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è. –ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100 –≤ –ª–∏—á–∫—É –±–æ—Ç—É. –£–¥–∞—á–∏!",
  });

  startRound(bot, groupId);
}

async function startRound(bot, groupId) {
  bot.removeAllListeners("message");

  if (players.length === 2) {
    isFinal.status = true;
  }
  if (players.length <= 3) {
    newRuleAdded.status = true;
  }

  players.forEach((user) => {
    user.isSelected = false;
    user.number = null;
    user.originalNumber = null;
    bot.sendMessage(user.userId, "üìå –í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100");
  });

  if (newRuleAdded.status && !newRuleAdded.isSent) {
    await bot.sendMessage(
      groupId,
      `‚ö† –ò–≥—Ä–æ–∫–æ–≤ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤—Å—ë –º–µ–Ω—å—à–µ... \n\n*–ù–æ–≤–æ–µ –±–µ—Å–ø–æ—â–∞–¥–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ:*\n–ï—Å–ª–∏ –æ–±–∞ –≤—ã–±–µ—Ä—É—Ç *–æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ —á–∏—Å–ª–æ* ‚Äî *–∫–∞–∂–¥—ã–π –∏–∑ –≤–∞—Å –ø–æ—Ç–µ—Ä—è–µ—Ç –ø–æ 2 –æ—á–∫–∞*.\n\n‚ôüÔ∏è *–ò–≥—Ä–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ö–∏—â–Ω–æ–π. –ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å ‚Äî –ø—É—Ç—å –∫ –ø–æ—Ä–∞–∂–µ–Ω–∏—é. –ü–æ–¥—É–º–∞–π –¥–≤–∞–∂–¥—ã.*`,
      { parse_mode: "Markdown" }
    );

    newRuleAdded.isSent = true;
  }

  if (isFinal.status && !isFinal.isSent) {
    await bot.sendMessage(
      groupId,
      `‚ö† –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—É–Ω–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è... üé≠\n\n*–ù–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É:*\n–ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ —Ñ–∏–Ω–∞–ª–∏—Å—Ç–æ–≤ –≤—ã–±–µ—Ä–µ—Ç *0*, –∞ –¥—Ä—É–≥–æ–π *100* ‚Äî *–ø–æ–±–µ–¥–∞ –±–µ–∑–∂–∞–ª–æ—Å—Ç–Ω–æ –¥–æ—Å—Ç–∞—ë—Ç—Å—è —Ç–æ–º—É, –∫—Ç–æ —Ä–∏—Å–∫–Ω—É–ª –∏ –≤—ã–±—Ä–∞–ª 0*.\n\n–ù–æ... –µ—Å–ª–∏ –æ–±–∞ —Å—ã–≥—Ä–∞—é—Ç –Ω–∞ *0* ‚Äî *–æ–±–∞ —Ç–µ—Ä—è—é—Ç –ø–æ 1 –æ—á–∫—É*. \n\n‚ôüÔ∏è *–°—Ç–∞–≤–∫–∏ –≤—ã—Ä–æ—Å–ª–∏. –û—à–∏–±–æ–∫ –Ω–µ –ø—Ä–æ—â–∞—é—Ç. –í—Ä–µ–º—è —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä.*`,
      { parse_mode: "Markdown" }
    );

    isFinal.isSent = true;
  }

  bot.on("message", async (chat) => {
    const chatId = chat.chat.id;
    const text = +chat.text;

    const player = players.find((p) => p.userId === chatId);
    if (!player || player.isSelected) return;

    if (isNaN(text) || text < 0 || text > 100) {
      bot.sendMessage(chatId, "‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100");
    } else {
      const result = Math.floor(text * 0.8);
      player.originalNumber = text;
      player.number = result;
      player.isSelected = true;

      await bot.sendMessage(chatId, `‚úÖ –í–∞—à–µ —á–∏—Å–ª–æ: ${text} * 0.8 = ${result}`);

      await bot.sendMessage(
        groupId,
        `[${chat.from.first_name}](tg://user?id=${chat.from.id}) –≤—ã–±—Ä–∞–ª(–∞) —á–∏—Å–ª–æ`,
        { parse_mode: "Markdown" }
      );

      const allSelected = players.every((p) => p.isSelected);

      if (allSelected) {
        if (isFinal.status) {
          const [firstPlayer, secondPlayer] = players;

          const isFirst0 = firstPlayer.originalNumber === 0;
          const isFirst100 = firstPlayer.originalNumber === 100;
          const isSecond0 = secondPlayer.originalNumber === 0;
          const isSecond100 = secondPlayer.originalNumber === 100;

          if (isFirst0 && isSecond100) {
            secondPlayer.score += 1;
            await bot.sendMessage(
              groupId,
              `‚öîÔ∏è [${firstPlayer.username}](tg://user?id=${firstPlayer.userId}) –≤—ã–±—Ä–∞–ª **0**, –∞ [${secondPlayer.username}](tg://user?id=${secondPlayer.userId}) –≤—ã–±—Ä–∞–ª **100**.\n\nüèÜ [${secondPlayer.username}] —Ç–µ—Ä—è–µ—Ç **1 –±–∞–ª–ª** –∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç —Ä–∞—É–Ω–¥.`,
              { parse_mode: "Markdown" }
            );
          } else if (isFirst100 && isSecond0) {
            firstPlayer.score += 1;
            await bot.sendMessage(
              groupId,
              `‚öîÔ∏è [${secondPlayer.username}](tg://user?id=${secondPlayer.userId}) –≤—ã–±—Ä–∞–ª **0**, –∞ [${firstPlayer.username}](tg://user?id=${firstPlayer.userId}) –≤—ã–±—Ä–∞–ª **100**.\n\nüèÜ [${firstPlayer.username}] —Ç–µ—Ä—è–µ—Ç **+1 –±–∞–ª–ª** –∏ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç —Ä–∞—É–Ω–¥.`,
              { parse_mode: "Markdown" }
            );
          } else if (isFirst0 && isSecond0) {
            firstPlayer.score += 1;
            secondPlayer.score += 1;
            await bot.sendMessage(
              groupId,
              `‚öîÔ∏è –û–±–∞ —Ñ–∏–Ω–∞–ª–∏—Å—Ç–∞ –≤—ã–±—Ä–∞–ª–∏ **0**! –ö–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö —Ç–µ—Ä—è–µ—Ç **1 –±–∞–ª–ª**.`,
              { parse_mode: "Markdown" }
            );
          } else {
            await standardWinnerCalc(bot, groupId);
            return;
          }

          eliminateAndContinue(bot, groupId);
          return;
        }

        await standardWinnerCalc(bot, groupId);
      }
    }
  });
}

async function standardWinnerCalc(bot, groupId) {
  const botNumber =
    (players.reduce((acc, p) => acc + p.number, 0) / players.length) * 0.8;

  const closestPlayer = players.reduce((prev, curr) => {
    return Math.abs(curr.number - botNumber) < Math.abs(prev.number - botNumber)
      ? curr
      : prev;
  });

  const getAllUsersNumbers = players.map(
    (p) =>
      `- ${p.username}: ${p.number} (${
        p.score !== 0 ? "-" + p.score : p.score
      })\n`
  );

  const numberCounts = {};
  players.forEach((p) => {
    numberCounts[p.number] = (numberCounts[p.number] || 0) + 1;
  });

  const repeatedNumbers = Object.keys(numberCounts).filter(
    (key) => numberCounts[key] > 1
  );

  if (repeatedNumbers.length > 0) {
    const repeatedPlayers = players.filter((p) =>
      repeatedNumbers.includes(String(p.number))
    );

    const uniquePlayers = players.filter(
      (p) => !repeatedNumbers.includes(String(p.number))
    );

    if (players.length <= 3) {
      repeatedPlayers.forEach((p) => (p.score += 2));
      const repeatedNames = repeatedPlayers
        .map((p) => `- [${p.username}](tg://user?id=${p.userId}) (${p.number})`)
        .join("\n");

      await bot.sendMessage(
        groupId,
        `‚ö†Ô∏è –ò–≥—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ —á–∏—Å–ª–æ –∏ –±—ã–ª–∏ –Ω–∞–∫–∞–∑–∞–Ω—ã:\n\n${repeatedNames}\n\n–í—Å–µ –æ–Ω–∏ —Ç–µ—Ä—è—é—Ç **-2 –±–∞–ª–ª–∞** (–Ω–∞–∫–∞–∑–∞–Ω–∏–µ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ).\n–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.`,
        { parse_mode: "Markdown" }
      );

      setTimeout(async () => {
        await eliminateAndContinue(bot, groupId);
      }, 1500);
      return;
    } else {
      const winnerChoseRepeatedNumber = repeatedPlayers.some(
        (p) => p.userId === closestPlayer.userId
      );

      if (winnerChoseRepeatedNumber) {
        await bot.sendMessage(
          groupId,
          `‚öñÔ∏è –ù–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –≤—ã–±—Ä–∞–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —á–∏—Å–ª–∞, –∏ —Å—Ä–µ–¥–∏ –Ω–∏—Ö –æ–∫–∞–∑–∞–ª—Å—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—å.\n–†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω **–Ω–∏—á—å–µ–π**, –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –±–∞–ª–ª—ã. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ!`,
          { parse_mode: "Markdown" }
        );

        setTimeout(async () => {
          await eliminateAndContinue(bot, groupId);
        }, 1500);
        return;
      }
    }
  }

  await bot.sendMessage(groupId, `üéØ –í—Å–µ –≤—ã–±—Ä–∞–ª–∏ —á–∏—Å–ª–æ!\n\n–ò–¥–µ—Ç —Ä–∞—Å—Å—á–µ—Ç...`);
  players.forEach((p) => {
    if (p.userId !== closestPlayer.userId) {
      p.score += 1;
    }
  });
  setTimeout(async () => {
    await bot.sendMessage(
      groupId,
      `ü§ñ –ë–æ—Ç –≤—ã–±—Ä–∞–ª —á–∏—Å–ª–æ: ${botNumber.toFixed(0)}\n\n` +
        `üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: [${closestPlayer.username}](tg://user?id=${closestPlayer.userId})\n\n` +
        `**–í—Å–µ —á–∏—Å–ª–∞:**\n\n${getAllUsersNumbers.join(
          ""
        )}\n\n –ê –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç–µ—Ä—è—é—Ç **1 –±–∞–ª–ª**.\n\n`,
      { parse_mode: "Markdown" }
    );
    await eliminateAndContinue(bot, groupId);
  }, 2000);
}

async function eliminateAndContinue(bot, groupId) {
  const eliminatedPlayers = players.filter((p) => p.score >= 3);
  if (eliminatedPlayers.length > 0) {
    for (const p of eliminatedPlayers) {
      await bot.sendMessage(
        groupId,
        `‚ùå [${p.username}](tg://user?id=${
          p.userId
        }) ${getRandomEliminationMessage()}`,
        { parse_mode: "Markdown" }
      );
    }
    players = players.filter((p) => p.score < 3);
  }

  if (players.length === 0) {
    await bot.sendMessage(
      groupId,
      `üé≠ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –í—Å–µ –∏–≥—Ä–æ–∫–∏ –±—ã–ª–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã. –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç.`,
      { parse_mode: "Markdown" }
    );
    isGameRunning = false;
    return;
  }

  if (players.length === 1) {
    const winner = players[0];
    await bot.sendMessage(
      groupId,
      `–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n\n [${winner.username}](tg://user?id=${
        winner.userId
      }) ${getRandomVictoryMessage()} üéâ`,
      { parse_mode: "Markdown" }
    );
    resetBeautyGame();
    return;
  }

  setTimeout(() => {
    bot.sendMessage(groupId, "–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥! üòà");
    startRound(bot, groupId);
  }, 1500);
}

function resetBeautyGame(chatId) {
  players = [];
  clearInterval(interval);
  isGameRunning = false;
  mainText = null;
  listenersAdded = false;
  isCanceled = false;
  isFinal = { status: false, isSent: false };
  selected = false;
}

module.exports = { beautyGame, checkBeautyGameStatus, resetBeautyGame };
